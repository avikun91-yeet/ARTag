import cv2
import numpy as np

def empty(a):
    pass

# #creating a trackbar to find the preprocessing kernels
# cv2.namedWindow("trackBars")
# cv2.resizeWindow("trackBars", (400, 500))
# cv2.createTrackbar("cannyT1", "trackBars", 0, 800, empty)
# cv2.createTrackbar("cannyT2", "trackBars", 0, 800, empty)


# the edge detection part
def preProcessing(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.GaussianBlur(img, (3,3), 1)
    img = cv2.Canny(img, 428, 227)

    return img

def findContours(img):
    approxList = []
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for cont in contours:
        area = cv2.contourArea(cont)
        if area > 2300:
            # cv2.drawContours(imgCont, cont, -1, (127, 0, 127), 3)
            peri = cv2.arcLength(cont, True)
            approx = cv2.approxPolyDP(cont, 0.02 * peri, True)
            x, y, w, h = cv2.boundingRect(approx)
            if len(approx) == 4:
                cv2.drawContours(imgContour, cont, -1, (205, 0, 255), 5)
                approxList.append(approx)

    return approxList


def reoder(allmyPoints):
    myPointsNewList = []
    for myPoints in allmyPoints:
        myPoints = myPoints.reshape((4,2))
        myPointsNew = np.zeros((4,1,2), np.int32)
        add = myPoints.sum(1)

        myPointsNew[0] = myPoints[np.argmin(add)]
        myPointsNew[3] = myPoints[np.argmax(add)]
        diff = np.diff(myPoints, axis=1)
        myPointsNew[1]=myPoints[np.argmin(diff)]
        myPointsNew[2] = myPoints[np.argmax(diff)]
        myPointsNewList.append(myPointsNew)
    return myPointsNewList

# def cropAndDetection(imgOriginal, points)




while True:
    ##getting the values for kernels from trackbar
    # cannyT1 = cv2.getTrackbarPos("cannyT1", "trackBars")
    # cannyT2 = cv2.getTrackbarPos("cannyT2", "trackBars")

    imgOriginal = cv2.imread("images/bonus3.jpg")
    img = cv2.resize(imgOriginal, (int(imgOriginal.shape[1] / 6), int(imgOriginal.shape[0] / 6)))
    imgContour = img.copy() #required to draw the contours on

    #preprocessed image = imgResult
    imgResult = preProcessing(img)

    #finds the contours and returns the bounding rectangles
    points = findContours(imgResult)

    #reorders the bounding rect according
    myPoints = np.int32(reoder(points))

    #testing and shit
    print(len(myPoints))
    # cv2.rectangle(img, (myPoints[0][0]), (myPoints[3][0]), (0, 255,0), thickness=3)
    if len(myPoints)==1:
        imgCropped1 = imgOriginal[myPoints[0][0][0][1]*6:myPoints[0][3][0][1]*6, myPoints[0][0][0][0]*6: myPoints[0][3][0][0]*6]
        cv2.imshow("cropped1", imgCropped1)
    elif len(myPoints)==2:
        imgCropped1 = imgOriginal[myPoints[0][0][0][1] * 6:myPoints[0][3][0][1] * 6,
                      myPoints[0][0][0][0] * 6: myPoints[0][3][0][0] * 6]
        cv2.imshow("cropped1", imgCropped1)
        imgCropped2 = imgOriginal[myPoints[1][0][0][1] * 6:myPoints[1][3][0][1] * 6,
                      myPoints[1][0][0][0] * 6: myPoints[1][3][0][0] * 6]
        cv2.imshow("cropped2", imgCropped2)




    #showing the images
    cv2.imshow("img", imgResult)
    cv2.imshow("imgContour", imgContour)
    # cv2.imshow("cropped", imgCropped)

    if cv2.waitKey(1) & 0xff==ord('q'):
        break
